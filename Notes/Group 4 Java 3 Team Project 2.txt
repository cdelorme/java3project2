

System Information!

Located in here are Visio Diagrams, and some detailed explanations about the system.

We still have to decide on a set of commands before we can move forward without worrying about discrepancies between client and server.


Here is my vision of the application:

Chat system extended to match making, with CLI based interpreter for sending and receiving commands over the network (separating the network code from the system code).

The client asks for a username at boot, and the connection is sent to the server.  A list of users is available in a list box where the user can select opponents and issue a challenge to start a game.

The server waits for connections, adds each connection (socket) to an arraylist.  The server listener and user objects are threaded.

The user objects listen for commands and contain a method to return data.

CLI messages received by the user objects are forwarded to a Command interpreter that passes them to relative interpreter classes.

The server manages the game instances, and returns change data to the client (eg game hosted by server, vs local).



How to approach this:

First, the Visio diagram does a great job showing where objects exist in the system, but not how the references or methods work.  That is why I made most of this document.

My idea of using a basic CLI allows us to separate the network components from the system logic, and a modular approach makes it flexible (easy to add to without changing any of the existing code).

What we need to do to prepare is determine a set of system names and command names, aka agree on terminology.  This assures that we don't end up with discrepancies while working on separate components.


Team Development Strategy:

I propose a two-man team strategy, where we cycle members of two and their roles.  Each team has the roles of Coder and Reviewer.  This is a real approach being used in the industry today, and this system gives everyone a chance to program, and to read each others code.




To better explain the design portion, here was what I had considered:

Client GUI Loads with JOptionPane input for Username

Displays a Scrollable Messages Box, scrollable Username List Box to one side, and a text input with a send button at the bottom.  A menu with file exit, and help about.

When a user is selected in the list, a button to "Issue Challenge" is activated.  When clicked a challenge message appears to the other user.

When a challenge is accepted, both usernames are removed from the user list and a game window is loaded.

I have not gotten into the Game GUI since I was not sure what we would select for the game when I began this.


The Server starts, accepts an optional port number to establish connections.

The server prepares a commander object and loads it with Interpreters.

The server threads a listen process where it makes a new user, sends the socket to the user, and adds that to a users arraylist.


User objects extend runnable as well, and on activation listen for messages.  By default they store a socket and at the end of the runnable method they remove themselves from the arraylist to end a connection.

Game objects are instantiated when a challenge is accepted, and are passed reference to both users competing.

A method to verify username is not already in use must exist.

Commands received by each user object are passed to the commander reference, and cycled through their relative interpreter to be executed.



Potential concerns and change suggestions in design:

User class should have a user factory aka UserManager, like GameManager, which can be used to get a fresh arraylist and manage the creation of users instead of passing arraylist references all over the place.

User objects need to unset their IO and socket variables and call to the User Factory to remove themselves from the arraylist and auto-resize that array-list.  This way we don't have a bunch of dead connections in storage.

The user destructor also needs to contact any games it is a part of so the game can end and call its destructor to free up server resources.

Should games be threaded?  Methods are being called by Threads, but I think we don't need to...


We "could" go a step further and use the port number from the socket as a user-id, and have that as a component in the client and server.  We could then add a game ID as well.  With these two changes we can allow one user to play multiple games simultaneously.  Totally beyond the scope of the project, but would be neat.

It would also be more flexible.

Another idea is to add more than one game!  Again with the modular CLI system it would be easy to create a new game type and simply implement it in the client and server.

Again way beyond the scope of the course.



Raw Textual Visio Representation:

Basic Classes:

Server

Interface -> Classes:

Commander
	ServerCommandSystem
Interpreter
	ChatServerInterpreter
	GameServerInterpreter
	DebugServerInterpreter
User
	ServerClient
UserManager
	UserFactory
Game
	Memory
GameManager
	GameFactory


Client
Connection

Interface -> Classes:

Receiver
	ClientCommandSystem
ClientInterpreter
	ChatClientInterpreter
	GameClientInterpreter
GameClient
	MemoryClient
